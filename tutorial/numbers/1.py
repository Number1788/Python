print(1/3)                                          #Обычное деление
print((2/3)+(1/2))
import decimal                                      #Импортируем библиотеку чисел с плавающей запятой
d=decimal.Decimal('3.141')
print(d+1)
decimal.getcontext().prec=2                         #Установкак количества знаков после заптяой
print(decimal.Decimal('1')/decimal.Decimal('3'))
from fractions import Fraction                      #Рациональные числа:числитель + знаменатель
f= Fraction(2,3)
print(f+1)
print(f +Fraction(1,3))
X=1
Y=2
Z=4
print((X+Y)*Z)                                      #Меняем старшинство операторов
print(X+(Y*Z))
print(int(3.1415))                                  #Усекаем дробную часть
print(float(3))                                     #Преобразуем цело в вещественное
a=3
b=4
print(a+1,a-1)                                      #Сложение и вычитание
print(b*3,b/2)                                      #Умножение и деление
print(a%2,b**2)                                     #Делению по модолю(остаток),возведение в степень
print(2+4.0,2.0**b)                                 #Смешивание типов, преоброзавание
print(b/2+a)                                        #(4/2)+3
print(b/(2.0+a))                                    #4/(2+3)
print(1<2)                                          #Меншье
print(2.0>=1)                                       #Больше или равно    
print(2.0==2.0)                                     #Проверка на равенсто
print(2.0!=2.0)                                     #Проверка на неравенство
print(X<Y<Z)                                        #Составная операция сравнения
print(X<Y and Y<Z)                                  #Таже операция но выполняется медленее т.к. длинее
print(X<Y>Z)
print(X<Y and Y>Z)                                  #Цепочки сооствествууют врыажению AND
print(1<2<3.0<4)
print(1>2>3.0<4)
print(1==2 <3)
print(10/4)                                         #Классическое деление(дробная часть остатется)
print(10//4)                                        #Деление с округлением вниз(дробная часть отсекается)
print(10/4.0)                                       #При деление разных типов чисел результат будет приведенн к наиболеее сложному
print(10//4.0)
print(5/2,5/-2)                                     #Некоторые особенности при округлении вниз с отрицательными числами
print(5//2,5//-2)
print(5/2.0,5/-2.0)
print(5//2.0,5//-2.0)
print(0o1,0o20,0o377)                               #Преобразование 8чных литералов в дестичные числа(0o)
print(0x01,0x10,0xFF)                               #Преобразование 16чных литералов в дестичные числа(0x)
print(0b1,0b10000,0b11111111)                       #Преобразование 2чных литералов в дестичные числа(0b)
print(oct(64),hex(64),bin(64))                      #oct -дестичное в восмиричное hex-дестичное в шестнадцатиричное bin - дестичное в двоичное
print(int('64'),int('100',8), int('40',16),         #преоброзование строки в число, в остальных случаях мы указыываем основние ситемы счисления
      int('1000000',2))
print(int('0x40',16), int('0b1000000',2))           #теже операция но с литералами
print('{0:o},{1:x},{2:b}'.format(64,64,64))         #различные  методы форматировании
print('%o,%x,%X' % (64,255,255))                                                 #0001
print(X<<2)                                         #Сдвиг влево на 2 бита:0100
print(X|2)                                          #Побитовое или: 0001|0010=0011
print(X&1)                                          #Побитовое и 0001&0001=0001
d= 0b0001                                           #Двоичные литералы
print(d<<2)                                         #Сдвиг влево
print(bin(d<<2))                                    #Строка двоичных цифр
print(bin(d|0b010))                                 #битовая операция ИЛИ
print(bin(d & 0b1))                                 #Битовая операция И
d= 0xFF                                             #Шестнадцатеричные литералы
print(bin(d))
print(d^ 0b10101010)                                #Битовая операция исключающее или
print(bin(d^ 0b10101010))                   
print(int('1010101',2))                             #Преобразование изображения числа по основанию
print(hex(85))                                      #вывод числа в шестнадцатиричном представлении
d=99
print(bin(d),d.bit_length())                        #bit_length функция для подсчетов количества битов
print(len(bin(99))-2)                               #len стандартная функция для подсчетов количества но менее удобная для битов
import math                                         #импорт библиотеки math
print(math.pi,math.e)                               #некоторые констатнты
print(math.sin(2*math.pi/180))                      #синус косинус и тд
print(math.sqrt(144),math.sqrt(2))                  #квадратный корень
print(pow(2,4),2**4)                                #возведение в степень
L=[1,2,3,4]
print(abs(-42.0),sum(L))                            #абсолютное значение, сумма
print(min(L),max(L))                                #минимум, максимум
print(math.sqrt(144))                               #Квадратный корень из модуля math
print(144 ** .5)                                    #Квадратный корень выражение
print(pow(144, .5))                                 #Квадратный корень встроенная функция
print(math.floor(2.56), math.floor(-2.56))          #округление вниз
print(math.trunc(2.56), math.trunc(-2.56))          #усечение(отброс дробной части)
print(int(2.56), int(-2.56))                        #усечение(преобразование в целое)
print(round(2.56), round(2.46),round(2.567,2))      #округление
print('%.1f' % 2.567, '{0:.2f}'.format(2.567))      #округление при отображении
import random                                       #импорт модуля Random
print(random.random())                              #Простой рандом
print(random.random())
print(random.randint(1,10))                         #рандом из диапазона
print(random.randint(1,10))
print(random.choice(['Life','Holly', 'Brain']))     #рандом из нескольких значений
print(random.choice(['Life','Holly', 'Brain']))
